2c2
< # Address Book Manager
---
> # Phone Book Manager
4,5c4,6
< # A simple program that creates and manages an address book.
< # Names, phone numbers, etc. are saved as a pickle data file.
---
> # A simple program that creates and manages a phone book file.
> # Names and phone numbers are saved as a JSON text file in the
> # same directory as this program.
11,13d11
< # TODO: Add ability to enter arbitrary keys for specific contacts
< # TODO: PEP 8 style guide adjustments
< 
14a13
> import json
16d14
< import cPickle
18,21d15
< # Program settings
< file_name = "./contacts.pkl" # File name for data
< entry_types = ('Name', 'Phone Number', 'Email', 'Street Address', 'City', 
<     'State', 'Zipcode') # Default list of address book fields. DO NOT CHANGE!
25,26c19
<     address_book = loadfile()
<     clear()
---
>     tel = loadfile()
28,32c21,22
<     # Display names only or complete address book?
<     if raw_input("Display a list of names only? y/n: ") in ('y', 'Y'):
<         clear()
<         print "\t\tAddress Book: Names List\n\n"
<         print "\n".join(sorted(address_book.keys()))
---
>     # clear screen
>     clear()
34,39c24,27
<     # Print entire address book to screen in alpha order
<     else:
<         clear()
<         print "\t\tAddress Book: All Contacts\n"
<         for name in sorted(address_book.keys()):
<             print_contact(address_book[name])
---
>     # Print phone book to screen in alpha order
>     print "      NAME%-15s -  PHONE NUMBER" %('')
>     for name in sorted(tel.keys()):
>         print "%-25s - %s" % (name, tel[name])
43,51c31,33
< def print_contact(contact):
<     # Display a contact's information line by line
<     print ""
<     for entry in entry_types:
<         print "%-14s : %s" % (entry, contact[entry])
< 
< def find():
<     # Load address book
<     address_book = loadfile()
---
> def find(delete):
>     # Load phone book and clear screen
>     tel = loadfile()
53c35
<     # Loop untill user has only one name or gives up
---
>     # Prompt user for name to search
55,56c37,41
<     while True:
<         query = raw_input("\nEnter contact name: ")
---
>     
>     # Loop untill user has only one name or gives up
>     looking = True
>     while looking:
>         query = raw_input("\nWhat name would you like to search for? ")
60,63c45,46
<         for name in sorted(address_book.keys()):
< 
<             # compare lower case strings
<             if len(re.findall(query.lower(), name.lower())) > 0:
---
>         for name in sorted(tel.keys()):
>             if len(re.findall(query, name)) > 0:
66,69c49,54
<         # We found a match!
<         if query in address_book:
<             print "\n:)"
<             print_contact(address_book[query])
---
>         # If only one name found, display that one name
>         if len(names_match) == 1:            
>             # Make sure query matches key exactly and print
>             query = names_match[0]
>             print "\n:)  ", query, ":", tel[query]
>             looking = False
71d55
<             break
73c57
<         # Display partial matches
---
>         # Display partial matches and 
75c59
<             print "Did you mean?\n"
---
>             print "Did you mean?"
78,79c62
<             print "\nType name exactly as it appears above."
<             continue    
---
>             print "Type name exactly as it appears above."
83,88c66
<             print "\n:(\t%s is NOT a contact in your address book." % (query)
< 
<             # Try again?
<             if not raw_input("Try again? y/n: ") in ('y', 'Y'):
<                 break
<     return query
---
>             print "\n:(\t%s is NOT in your phonebook" % (query)
89a68,73
>         # Try again?
>         searching = raw_input("Search again? y/n >")
>         if searching in ('y', 'Y'):
>             looking = True
>         else:
>             return
91,105c75,86
< def delete():
<     # Find user name to delete
<     name = find()
<     address_book = loadfile()
< 
<     # Verify that this entry should be removed
<     if raw_input("Delete %s? (y/n): " % (name)) in ('y', 'Y'):
<         
<         # Remove and write to file
<         del address_book[name]
<         writefile(address_book)
<         print "Removed %s from address book." % name
<     else:
<         print "Delete aborted", name, "NOT removed."
<     pause()
---
>     # If user wants to remove this entry
>     if delete:
>         # Verify that this entry should be removed
>         confirm = raw_input("Delete %s? (y/n) >" % (query))
>         if confirm in ('y', 'Y'):
>             # Remove and write to file
>             del tel[query]
>             writefile(tel)
>             print query, "removed from phone book."
>         else:
>             print "Delete aborted", query, "NOT removed."
>         pause()
109,110c90,91
<     # Open file and load address book
<     address_book = loadfile()
---
>     # Open file and load phone book
>     tel = loadfile()
112c93
<     # Continue while user is entering new contacts
---
>     # Continue while user is entering new names
114,129c95,113
<         
<         # Gather information about new contact
<         clear()        
<         print "Enter information for your new contact."
<         new_contact = {}
<         for entry in entry_types:
<             new_contact[entry] = raw_input("Enter %s: " % entry)
< 
<         # Check if name exists already
<         if new_contact["Name"] in address_book:
<             print "\nThis contact alread in address book!"
<             print_contact(new_contact)
< 
<             # If it does, update this existing contact?
<             if not raw_input("\nUpdate %s with contact info above? y/n: " 
<                 % new_contact["Name"]) in ('y', 'Y'):
---
>         # Clear screen and prompt user for name to enter
>         clear()
>         newName = raw_input("\tName for new entry: ")
> 
>         # Check for existing name
>         if newName in tel:
>             print "Already in Phone Book!"
>             print newName, ":", tel[newName]
>             if not raw_input("Update phone number? y/n >") in ('y', 'Y'):
>                 return
> 
>         # Prompt user for phone number and validate
>         while True:
>              # Prompt user for phone number
>             print "\t(Enter 10 digit phone number with no spaces or other characters)"
>             newPhone = raw_input("\tPhone number for %s: " % (newName))
> 
>             # 10 digits only
>             if len(newPhone) == 10 and newPhone.isdigit():
132,133c116,120
<         # Add the new contact to the address book
<         address_book[new_contact["Name"]] = new_contact
---
>             # Throw error at user, invalid phone number
>             print "Invalid phone number. Please enter as [1234567890]"
> 
>         # add new item to dict with formated phone number
>         tel[newName] = newPhone[0:3] + "-" + newPhone[3:6] + "-" + newPhone[6:]
136c123
<         if not raw_input("\nAdd another name? y/n: ") in ('y', 'Y'):
---
>         if not raw_input("Add another name? y/n>") in ('y', 'Y'):
139,140c126,127
<     # Write updated address book to file
<     writefile(address_book)
---
>     # Write updated phone book to file
>     writefile(tel)
144c131
<     # Clear screen and verify that user wants to remove entire address book
---
>     # Clear screen and verify that user wants to remove entire phonebook
146,149c133,140
<     print "Delete entire Address Book?\nThis cannot be undone!"
<     if raw_input("Delete all contacts from Address Book? y/n: ") in ('y', 'Y'):
<         os.remove(file_name)
<         print "All contacts deleted"
---
>     print "Delete entire Phonebook.\nThis cannot be undone!"
>     if raw_input("Are you sure? y/n >") in ('y', 'Y'):
>         
>         # open file and overwrite
>         f = open("./addresses.txt", 'w')
>         f.truncate()
>         f.close()
>         print "Phonebook deleted"
151c142,143
<         print "Delete aborted.  Contacts NOT removed."
---
>         print "Delete aborted.  Phonebook NOT removed."
> 
158c150
<     f = open(file_name, 'a+')
---
>     f = open("./addresses.txt", 'a+')
160c152
<     # Read file into memory, if a file is empty, create and empty dict
---
>     # Read file into memory, if a file is empty, create and empty dict 'tel'
162,164c154,156
<         address_data = cPickle.load(f)
<     except(ValueError, EOFError):
<         address_data = {}
---
>         tel = json.load(f)
>     except ValueError:
>         tel = {}
166c158
<     # Close file and return the address book
---
>     # Close file and return the phone book
168c160
<     return address_data
---
>     return tel
171c163
< def writefile(address_data):
---
> def writefile(tel):
173c165
<     f =  open(file_name, 'w')
---
>     f =  open("./addresses.txt", 'w')
175,176c167,168
<     # Write the address book to file as pickle data
<     cPickle.dump(address_data, f)
---
>     # Write the phone book to file as JSON text
>     json.dump(tel, f)
183c175,176
<     raw_input ("\nPress Enter")
---
>     print "\n"
>     raw_input ("Press Enter")
199,205c192,198
<     print "\t  Welcome to ADDRESS BOOK!\n\n"
<     print "\t1) List All Contacts"
<     print "\t2) Find Contact by Name"
<     print "\t3) Add Contact"
<     print "\t4) Remove a contact"
<     print "\t5) Delete All contacts"
<     print "\t6) Quit\n\n"
---
>     print "\t  Welcome to PHONEBOOK!\n\n"
>     print "\t1) List Phone Numbers"
>     print "\t2) Find Name"
>     print "\t3) Add Phone Number"
>     print "\t4) Remove a Phone Number"
>     print "\t5) Delete All Phone Numbers"
>     print "\t6) Quit\n\n\t"
209c202
<         sel = raw_input("Select an option: ")
---
>         sel = raw_input("select an option: ")
222c215
<             find()
---
>             find(False)
226c219
<             delete()
---
>             find(True)
